import React, { useState, useEffect } from 'react';
import './ProfileDrawer.css';

const statuses = ['–ù–∞–∑–Ω–∞—á–µ–Ω–∞', '–í —Ä–∞–±–æ—Ç–µ', '–í—ã–ø–æ–ª–Ω–µ–Ω–∞', '–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ'];

const ProfileDrawer = ({ user, isOpen, onClose, tasks, onTaskChange, onLogout }) => {
  const [userTasks, setUserTasks] = useState([]);
  
  useEffect(() => {
    const tasksWithDates = Object.entries(tasks).flatMap(([date, dayTasks]) => {
      return dayTasks
        .filter(t => t.assignedTo === user.username)
        .map(task => ({
          ...task,
          date 
        }));
    });
    
    tasksWithDates.sort((a, b) => {
      const statusOrder = {
        '–í —Ä–∞–±–æ—Ç–µ': 0,
        '–ù–∞–∑–Ω–∞—á–µ–Ω–∞': 1,
        '–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ': 2,
        '–í—ã–ø–æ–ª–Ω–µ–Ω–∞': 3
      };
      
      if (statusOrder[a.status] !== statusOrder[b.status]) {
        return statusOrder[a.status] - statusOrder[b.status];
      }
      
      return new Date(b.date) - new Date(a.date);
    });
    
    setUserTasks(tasksWithDates);
  }, [tasks, user.username]);

  const handleStatusChange = (task, newStatus) => {
    if (onTaskChange) {
      const updatedTask = { ...task, status: newStatus };
      onTaskChange(task.date, updatedTask);
    }
  };

  const formatDate = (dateString) => {
    const [year, month, day] = dateString.split('-');
    return `${day}.${month}.${year}`;
  };

  const getStatusClass = (status) => {
    switch (status) {
      case '–ù–∞–∑–Ω–∞—á–µ–Ω–∞': return 'task-assigned';
      case '–í —Ä–∞–±–æ—Ç–µ': return 'task-in-progress';
      case '–í—ã–ø–æ–ª–Ω–µ–Ω–∞': return 'task-done';
      case '–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ': return 'task-revision';
      default: return '';
    }
  };

  const getDepartmentName = (deptId) => {
    if (!user || !Array.isArray(user.departments)) return `ID ${deptId}`;
    const dept = user.departments.find(d => d.id === deptId);
    return dept ? dept.name : `ID ${deptId}`;
  };

  const primaryDeptId = user?.primary_department_id ? Number(user.primary_department_id) : null;
  const allAssignedDeptObjects = Array.isArray(user?.departments) ? user.departments : [];

  const primaryDepartmentName = primaryDeptId
    ? getDepartmentName(primaryDeptId)
    : (allAssignedDeptObjects.length > 0 ? allAssignedDeptObjects[0].name : '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω');

  const additionalDepts = allAssignedDeptObjects.filter(dept => dept.id !== primaryDeptId);

  return (
    <div className={`profile-drawer ${isOpen ? 'open' : ''}`}>
      <div className="drawer-header">
        <h3>üë§ –ü—Ä–æ—Ñ–∏–ª—å</h3>
        <div className="header-actions">
          <button className="logout-btn" onClick={onLogout}>
            –í—ã–π—Ç–∏
          </button>
          <button className="close-btn" onClick={onClose}>
            ‚úñ
          </button>
        </div>
      </div>
      
      <div className="profile-info">
        <p><strong>–ò–º—è:</strong> {user.name || '(–ò–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ)'}</p>
        <p><strong>–õ–æ–≥–∏–Ω:</strong> {user.username || '(–õ–æ–≥–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω)'}</p>
        <p>
          <strong>–†–æ–ª—å:</strong> {
            user.role === 'superadmin' ? '–°—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' :
            user.role === 'admin' ? '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
          }
        </p>

        {user.role !== 'superadmin' && (
          <>
            <p><strong>–û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–¥–µ–ª:</strong> {primaryDepartmentName}</p>
            {additionalDepts.length > 0 && (
              <div className="additional-departments">
                <strong>–î–æ–ø. –æ—Ç–¥–µ–ª—ã:</strong>
                <div className="department-badges">
                  {additionalDepts.map(dept => (
                    <span key={dept.id} className="department-badge">{dept.name}</span>
                  ))}
                </div>
              </div>
            )}
          </>
        )}
      </div>
      
      {user.role !== 'superadmin' && (
        <div className="user-tasks">
          <h4>üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏ ({userTasks.length})</h4>
          
          {userTasks.length === 0 ? (
            <div className="no-tasks">–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á</div>
          ) : (
            <div className="tasks-list">
              {userTasks.map((task) => (
                <div key={task.id} className={`task-card ${getStatusClass(task.status)}`}>
                  <div className="task-header">
                    <div className="task-date">{formatDate(task.date)}</div>
                    <div className="task-controls">
                      <select 
                        value={task.status}
                        onChange={(e) => handleStatusChange(task, e.target.value)}
                        className={`status-dropdown ${getStatusClass(task.status)}`}
                      >
                        {statuses.map(status => (
                          <option key={status} value={status}>{status}</option>
                        ))}
                      </select>
                    </div>
                  </div>
                  <div className="task-title">{task.text}</div>
                  {task.description && (
                    <div className="task-description">{task.description}</div>
                  )}
                </div>
              ))}
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default ProfileDrawer;